module pixel_decoder(
	input clock,
	input vsync,
	input href,
	input [7:0] data,
	output reg p_valid = 0,
	output [23:0] p_data,
	output reg f_done = 0
);

    reg state = 0;
    reg [1:0] axis = 0;
    reg [7:0] y, u, v;

    assign p_data = { y, u, v };
	
	always @(posedge clock)
	begin
        if (state) begin
            state <= !vsync;
		    f_done <= vsync;
			p_valid <= href & (axis%2);
			if (href) begin
                axis <= axis + 1;
				case (axis)
				    0: 
				        u = data;
					1:
					    y = data;
					2:
					    v = data;
					3:
					    y = data;
			    endcase
			end
		end
        else begin
			state <= !vsync;
			f_done <= 0;
			p_valid <= 0;
			axis <= 0;				
		end
	end
endmodule

//This module is responsible to take the pixels from the camera
//This module is based on FSM
//First State is the waiting until the start of signal of recieving the frame
//Second State is recieving the last pixel and go back again to the first state

/*module pixel_decoder(
	input clock,						// Camera clock pin of the camera which is generated by the camera itself
	input vsync,						//	Vertical synchronization signal of the camera
	input href,							// Horizontal synchronization signal of the camera
	input [7:0] data,			// Data wires of the camera
	output reg p_valid = 0,			// Flag to indicate that the pixel is valid from the camera
	output reg [11:0] p_data =0,	// Pixel's values from the camera
	output reg f_done = 0			// Flag to indicate that the whole frame is recieved
);


	reg state_flag = 0;	// This is used as States flag
   reg p_half = 0;		// Flag to know if we recieved the first byte from the camera or not
	
	// This block is activated at the positive edge of camera clock
	// This block is handling the signal of vertical and horizontal synchronization signals to recieve the data in the right cycle
	always@(posedge clock)
	begin 
		case(state_flag)
			0: begin 	// Waiting until the falling edge of the Vsync signal to start recieving the pixel's value 	
				state_flag <= (!vsync) ? 1'b1 : 1'b0;	// Changing the state depends on the Vertical signal (Negative edge)
				// Reset the flags of the frame and pixel
				f_done <= 0;
				p_half <= 0;				
			end
		
			1: begin 	// State of recieving the 2 bytes (16-bits) of the value of the pixel
				state_flag <= vsync ? 1'b0 : 1'b1;	// Changing the state depends on the Vertical signal (Positive edge)
				f_done <= vsync ? 1'b1 : 1'b0;		// Indicate if the frame is done or not yet
				p_valid <= (href && p_half) ? 1'b1 : 1'b0;	// Indicate if the pixel's value is all recieved or not yet
				// Recieving the pixel's color values
				if (href) begin
					p_half <= ~ p_half;								// Toggling the pixel half flag
					if (p_half) p_data[11:8] <= data[7:4];		// Recieving the first  byte of the pixel
					//else p_data[15:8] <= data_wires;				// Recieving the second byte of the pixel
				end
				
			end
		endcase
	end
	
endmodule*/